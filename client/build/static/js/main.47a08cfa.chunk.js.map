{"version":3,"sources":["store/actions/AuthActions.js","store/providers/AuthProvider.js","store/actions/CoreActions.js","store/providers/CoreProvider.js","components/homelayout/sidebar/Links.js","components/homelayout/sidebar/Profile.js","components/homelayout/sidebar/Sidebar.js","components/homelayout/stockbar/Stockcard.js","components/homelayout/stockbar/Stockbar.js","components/homelayout/views/stockview/StockHeader.js","components/homelayout/views/stockview/StockGraph.js","components/homelayout/views/stockview/StockStats.js","components/homelayout/views/stockview/StockOrder.js","components/homelayout/views/stockview/StockNews.js","components/homelayout/views/stockview/StockView.js","components/homelayout/views/orderview/OrderHistory.js","components/homelayout/views/orderview/OrderForm.js","components/homelayout/views/orderview/OrderFunds.js","components/homelayout/views/orderview/OrderView.js","routers/ViewRouter.js","components/homelayout/HomeLayout.js","components/authlayout/AuthForm.js","components/authlayout/AuthLayout.js","routers/AppRouter.js","store/providers/Provider.js","App.js","serviceWorker.js","index.js"],"names":["login","gql","signup","AuthContext","createContext","userID","token","AuthProvider","children","useState","setUserID","setToken","useMutation","actions","updateAuth","result","localStorage","setItem","Provider","value","args","a","variables","data","message","updateToken","newToken","local_auth","getItem","logout","clear","getUser","getStocks","getStock","createOrder","changeBalance","CoreContext","user","showPortfolio","stockRef","stocks","stockData","CoreProvider","useContext","useQuery","pollInterval","useEffect","error","notification","description","setstockRef","setShowPortfolio","selectStock","index","stock","ticker","console","log","amount","accountID","accounts","id","parseInt","Links","history","useHistory","location","useLocation","navToDash","pathname","push","className","mode","defaultSelectedKeys","defaultOpenKeys","SubMenu","key","title","icon","DashboardOutlined","onClick","Item","AreaChartOutlined","to","LogoutOutlined","Profile","loading","active","avatar","size","shape","UserOutlined","email","balance","toFixed","renderInfo","Sider","Layout","Sidebar","theme","trigger","Stockcard","props","change","color","label","Math","abs","style","renderChange","price","Stockbar","map","portfolio","i","length","inPortfolio","renderCards","StockHeader","name","shares","renderSharesOwned","prefix","labelPercent","labelPrice","textAlign","moment","require","StockGraph","setData","rawData","date","format","ask","height","width","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","dataKey","interval","type","domain","isAnimationActive","stroke","fillOpacity","fill","Descriptions","stats","StockStats","layout","bordered","stat","charAt","toUpperCase","slice","StockOrder","setShares","submitOrder","action","stockID","quantity","onChange","e","min","max","StockNews","news","setNews","testNews","headline","author","reverse","StockView","gutter","xs","lg","renderView","OrderHistory","orders","order","withdraw","deposit","buy","sell","renderOrder","Option","Select","OrderForm","formRef","useRef","setQuantity","setPrice","editPrice","setEditPrice","updatePrice","formData","current","getFieldsValue","priceType","symbol","newPrice","setFieldsValue","onFinish","goodTill","expiry","resetFields","ref","span","rules","required","showSearch","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","renderSelect","formatter","replace","parser","disabled","Group","defaultValue","Button","htmlType","OrderFunds","values","mult","OrderView","ViewRouter","exact","path","component","HomeLayout","AuthForm","formType","placeholder","LockOutlined","float","noStyle","href","TabPane","Tabs","RegisterLayout","align","justify","md","tab","AppRouter","AuthLayout","httpLink","createHttpLink","uri","authLink","setContext","_","headers","client","ApolloClient","link","concat","cache","InMemoryCache","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.47a08cfa.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport default {\r\n    login: gql`\r\n        mutation Login($email: String!, $password: String!) {\r\n            login(email: $email, password: $password) {\r\n                message            \r\n                userID\r\n                token\r\n            }\r\n        }`\r\n    ,\r\n\r\n    signup: gql`\r\n        mutation Signup($email: String!, $password: String!) {\r\n            signup(email: $email, password: $password) {\r\n                message            \r\n                userID\r\n                token\r\n            }\r\n        }`\r\n    ,\r\n}","import React, { useState, createContext, useContext } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport actions from '../actions/AuthActions'\r\n\r\n\r\nexport const AuthContext = createContext({\r\n    userID: \"\",\r\n    token: \"\",\r\n})\r\n\r\nexport const AuthProvider = ({children}) => {\r\n    const [userID, setUserID] = useState(\"\");\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const [login] = useMutation(actions.login)\r\n    const [signup] = useMutation(actions.signup)\r\n\r\n    const updateAuth = (result) => {\r\n        localStorage.setItem('token', result.token)\r\n        localStorage.setItem('userID', result.userID)\r\n\r\n        setUserID(result.userID)\r\n        setToken(result.setToken)\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                userID,\r\n                token,\r\n\r\n                login: async (args) => {\r\n                    try {\r\n                        const result = await login({variables: args})\r\n                        updateAuth(result.data.login)\r\n                    } catch(error) {\r\n                        return error.message\r\n                    }\r\n                },\r\n\r\n                signup: async (args) => {\r\n                    try {\r\n                        const result = await signup({variables: args})\r\n                        updateAuth(result.data.signup)\r\n                    } catch(error) {\r\n                        return error.message\r\n                    }\r\n                },\r\n\r\n                updateToken: (newToken) => {\r\n                    localStorage.setItem('token', newToken)\r\n                    setToken(newToken)\r\n                },\r\n                \r\n                local_auth: () => {\r\n                    const token = localStorage.getItem('token')\r\n                    const userID = localStorage.getItem('userID')\r\n\r\n                    if(token && userID) {\r\n                        setToken(token)\r\n                        setUserID(userID)            \r\n\r\n                        return {token, userID}\r\n                    }\r\n                    \r\n                    return false\r\n                },\r\n\r\n                logout: () => {\r\n                    setUserID(\"\");\r\n                    setToken(\"\");\r\n\r\n                    localStorage.clear();\r\n                },\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}","import { gql } from '@apollo/client';\r\n\r\nexport default {\r\n    getUser: gql`\r\n        query user($userID: ID!) {\r\n            user(id: $userID) {\r\n                email            \r\n                accounts{\r\n                    id\r\n                    balance\r\n                    portfolio{\r\n                        id\r\n                        shares\r\n                    }\r\n                }\r\n            }\r\n        }`\r\n    ,\r\n    getStocks: gql`\r\n        query stocks {\r\n            stocks {\r\n                id\r\n                ticker\r\n                name\r\n                price\r\n                change\r\n                open\r\n                high\r\n                low\r\n                ask\r\n                bid\r\n                data {\r\n                    date\r\n                    ask\r\n                    bid\r\n                }\r\n            }\r\n        }`\r\n    ,\r\n    getStock: gql`\r\n        query stock($stockID: ID!) {\r\n            stock(id: $stockID) {\r\n                data {\r\n                    date\r\n                    ask\r\n                    bid\r\n                }\r\n            }\r\n        }`\r\n    ,\r\n    createOrder: gql`\r\n        mutation createOrder(\r\n            $accountID: String!,\r\n            $stockID: String!,\r\n            $action: String!,\r\n            $quantity: Int!,\r\n            $price: Int,\r\n            $expiry: String\r\n        ) {\r\n            createOrder(\r\n                accountID: $accountID,\r\n                stockID: $stockID,\r\n                action: $action,\r\n                quantity: $quantity,\r\n                price: $price,\r\n                expiry: $expiry\r\n            ) {\r\n                stock{\r\n                    ticker\r\n                }\r\n            }\r\n        }`\r\n    ,\r\n    changeBalance: gql`\r\n        mutation changeBalance(\r\n            $accountID: String!,\r\n            $amount: Int!,\r\n        ) {\r\n            changeBalance(\r\n                accountID: $accountID,\r\n                amount: $amount,\r\n            ) {\r\n                balance\r\n            }\r\n        }`\r\n    ,\r\n}","import React, { useState, createContext, useContext, useEffect } from 'react';\r\nimport { AuthContext } from './AuthProvider';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport actions from '../actions/CoreActions'\r\n\r\nimport {notification} from 'antd'\r\n\r\nexport const CoreContext = createContext({\r\n    user: null,\r\n    showPortfolio: true,\r\n    stockRef: 0,\r\n    stocks: [],\r\n    stockData: [],\r\n})\r\n\r\nexport const CoreProvider = ({children}) => {\r\n    const { userID, logout } = useContext(AuthContext);\r\n    \r\n    const user = useQuery(actions.getUser, {variables: { userID }, pollInterval: 500})\r\n    const stocks = useQuery(actions.getStocks, {pollInterval: 500})\r\n\r\n    const [createOrder] = useMutation(actions.createOrder)\r\n    const [changeBalance] = useMutation(actions.changeBalance)\r\n\r\n    useEffect(() => {\r\n        if(stocks.error && userID) {\r\n            notification['error']({\r\n                message: 'Authentication Error',\r\n                description: \"Your session has expired, please sign in again.\"\r\n            })\r\n\r\n            logout()\r\n        }\r\n    }, [stocks.error])\r\n\r\n    const [stockRef, setstockRef] = useState(0);\r\n    const [showPortfolio, setShowPortfolio] = useState(true);\r\n\r\n    return (\r\n        <CoreContext.Provider\r\n            value={{\r\n                user,\r\n                stockRef,\r\n                stocks,\r\n                showPortfolio,\r\n\r\n                selectStock: (index) => {\r\n                    setstockRef(index);\r\n                },\r\n\r\n                createOrder: async (args) => {                   \r\n                    try {\r\n                        const result = await createOrder({variables: args})\r\n\r\n                        notification['info']({\r\n                            message: 'Order Status',\r\n                            description: `Your order for ${result.data.createOrder.stock.ticker} has been created.`\r\n                        })\r\n                    } catch(error) {\r\n                        console.log(error.message)\r\n\r\n                        notification['error']({\r\n                            message: 'Order Status',\r\n                            description: 'Something went wrong, order could not be created.'\r\n                        })\r\n                    }\r\n                },\r\n\r\n                changeBalance: async (amount) => {\r\n                    const args = {\r\n                        accountID: user?.data.user.accounts[0].id,\r\n                        amount: parseInt(amount),                        \r\n                    }\r\n\r\n                    try {\r\n                        const result = await changeBalance({variables: args})\r\n                    } catch(error) {\r\n                        console.log(error.message)\r\n\r\n                        notification['error']({\r\n                            message: 'Transaction Status',\r\n                            description: 'Insufficient funds.'\r\n                        })\r\n                    }\r\n                },\r\n\r\n                setShowPortfolio,\r\n            }}\r\n        >\r\n            {children}\r\n        </CoreContext.Provider>\r\n    );\r\n}","import React, {useContext} from 'react';\r\nimport { useHistory, useLocation, NavLink } from 'react-router-dom'\r\nimport { Menu } from \"antd\"\r\n\r\nimport {\r\n    DashboardOutlined,\r\n    AreaChartOutlined,\r\n    LogoutOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { AuthContext } from '../../../store/providers/AuthProvider';\r\nimport { CoreContext } from '../../../store/providers/CoreProvider';\r\n\r\nfunction Links() {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const { logout } = useContext(AuthContext); \r\n    const { setShowPortfolio } = useContext(CoreContext);\r\n\r\n    const navToDash = () => {\r\n        const { pathname } = location\r\n        if(pathname === \"/home\" || pathname === \"/home/stock\") return\r\n        history.push('/home/stock')\r\n    }\r\n\r\n    const renderSubmenu = () => (\r\n        <Menu.SubMenu key='dashboard' title='Dashboard' icon={<DashboardOutlined/>} onClick={navToDash}>\r\n            <Menu.Item key='dash-portfolio' onClick={() => setShowPortfolio(true)}>\r\n                My Portfolio\r\n            </Menu.Item>\r\n            <Menu.Item key='dash-all' onClick={() => setShowPortfolio(false)}>\r\n                All Stocks\r\n            </Menu.Item>\r\n        </Menu.SubMenu>\r\n    )\r\n\r\n    return (\r\n        <Menu\r\n            className=\"sidebar-menu\"\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={['dash-portfolio']}\r\n            defaultOpenKeys={['dashboard']}\r\n        >\r\n            {renderSubmenu()}\r\n\r\n            <Menu.Item key='orders' icon={<AreaChartOutlined/>}>\r\n                Orders\r\n                <NavLink to='/home/order'/>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item key='logout' icon={<LogoutOutlined/>}>\r\n                Logout\r\n                <NavLink to='/auth' onClick={logout}/>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default Links;","import React, { useContext, useEffect } from 'react';\r\nimport { Avatar, Skeleton } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { CoreContext } from '../../../store/providers/CoreProvider';\r\n\r\nfunction Profile() {\r\n    const { user } = useContext(CoreContext);\r\n\r\n    const renderInfo = () => {\r\n        if(user.data) {\r\n            let data = user.data.user\r\n            return (\r\n                <div className=\"profile-info\">\r\n                    <p className=\"info-name\">{data.email}</p>\r\n                    <p className=\"info-balance\">${(data.accounts[0].balance/100).toFixed(2)}</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (        \r\n        <div className=\"profile\">\r\n            <Skeleton loading={user.loading} active avatar>\r\n                <Avatar\r\n                    className=\"profile-avatar\"\r\n                    size={48}\r\n                    shape=\"square\"\r\n                    icon={<UserOutlined/>}\r\n                />\r\n                {renderInfo()}\r\n            </Skeleton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport Links from './Links';\r\nimport Profile from './Profile';\r\n\r\nconst { Sider } = Layout;\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <Sider\r\n            className=\"sidebar\"\r\n            theme=\"light\"\r\n            trigger={null}\r\n        >\r\n            <div className=\"sidebar-header\">\r\n                <p>fleamarket 52</p>\r\n            </div>\r\n\r\n            <div className=\"sidebar-content\">\r\n                <Links/>\r\n                <Profile/>\r\n            </div>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, { useContext } from 'react';\r\nimport { CoreContext } from '../../../store/providers/CoreProvider';\r\n\r\nfunction Stockcard({props: {stock, index}}) {\r\n    const {selectStock, stockRef} = useContext(CoreContext);\r\n\r\n    const getCardClass = () => {\r\n        if(index === stockRef) {\r\n            return 'stockcard-selected'\r\n        } else {\r\n            return 'stockcard'\r\n        }\r\n    }\r\n\r\n    const renderChange = (change) => {\r\n        const color = (change > 0) ? 'green' : 'red';\r\n        const prefix = (change > 0) ? '+' : '-';\r\n        const label = prefix + Math.abs(change/100);\r\n\r\n        return (\r\n            <p\r\n                className=\"stockcard-change\"\r\n                style={{color: color}}\r\n                key={`stockchange-${index}`}\r\n            >\r\n                {label}%\r\n            </p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={getCardClass()} onClick={() => selectStock(index)}>\r\n            <p className=\"stockcard-ticker\">{stock.ticker}</p>\r\n            {renderChange(stock.change)}\r\n            <p className=\"stockcard-price\">${stock.price/100}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stockcard;","import React, { useContext } from 'react';\r\nimport { CoreContext } from '../../../store/providers/CoreProvider';\r\nimport { Layout, Skeleton } from 'antd';\r\nimport Stockcard from './Stockcard';\r\n\r\nconst { Sider } = Layout;\r\n\r\nfunction Stockbar() {\r\n    const { stocks, user, showPortfolio } = useContext(CoreContext);\r\n\r\n    const inPortfolio = (stock) => {\r\n        if(!showPortfolio) return true\r\n        const {portfolio} = user.data.user.accounts[0]\r\n\r\n        for(let i=0; i<portfolio.length; i++) {\r\n            if(portfolio[i].id === stock.id) return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    const renderCards = () => {\r\n        if(stocks.data && user.data) {\r\n            return (\r\n                <>\r\n                    { stocks.data.stocks.map((stock, index) => {\r\n                        if(inPortfolio(stock)) return(<Stockcard key={`stockcard-${index}`} props={{stock, index}}/>)\r\n                    })}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Sider\r\n            className=\"stockbar\"\r\n            theme=\"light\"\r\n            trigger={null}\r\n        >\r\n            <div className=\"stockbar-menu\">\r\n                <Skeleton loading={stocks.loading} active>\r\n                    {renderCards()}\r\n                </Skeleton>\r\n            </div>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default Stockbar;","import React, { useContext } from 'react';\r\nimport { CoreContext } from '../../../../store/providers/CoreProvider';\r\n\r\nfunction StockHeader({stock}) {\r\n    const { user } = useContext(CoreContext);\r\n\r\n    const renderChange = ({change, price}) => {\r\n        change = change/100;\r\n        price = price/100;\r\n\r\n        const color = (change > 0) ? 'green' : 'red';\r\n        const prefix = (change > 0) ? '+' : '-';        \r\n        const labelPercent = Math.abs(change);\r\n        const labelPrice = prefix + '$' + (labelPercent * price * 0.01).toFixed(2)\r\n\r\n        return (\r\n            <p\r\n                className=\"stockview-change\"\r\n                style={{color: color, textAlign: 'right'}}\r\n            >\r\n                {labelPrice} ({labelPercent}%)\r\n            </p>\r\n        )\r\n    }\r\n\r\n    const renderSharesOwned = () => {\r\n        if(user.loading) return\r\n        const {portfolio} = user.data.user.accounts[0]\r\n\r\n        for(let i=0; i<portfolio.length; i++) {\r\n            if(portfolio[i].id === stock.id) return `You own ${portfolio[i].shares} shares of ${stock.ticker}`\r\n        }\r\n\r\n        return `You do not own any shares of ${stock.ticker}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"stockview-header\">\r\n            <div>\r\n                <p className=\"stockview-title\">{stock.name}</p>\r\n                <p className=\"stockview-shares\">{renderSharesOwned()}</p>\r\n            </div>\r\n\r\n            <div>\r\n                <p className=\"stockview-price\">${stock.price/100}</p>\r\n                {renderChange(stock)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StockHeader;","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    ResponsiveContainer, XAxis, YAxis, CartesianGrid,\r\n    Tooltip, AreaChart, Area\r\n} from 'recharts';\r\n\r\nconst moment = require('moment')\r\n\r\nfunction StockGraph({stock}) {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const rawData = stock.data\r\n        const result = []\r\n\r\n        for(let i=rawData.length-1; i>=0; i--) {\r\n            result.push({\r\n                name: moment(rawData[i].date).format('MMM Do'),\r\n                price: rawData[i].ask/100\r\n            })\r\n        }\r\n\r\n        setData(result)\r\n    }, [stock])\r\n\r\n    return (\r\n        <ResponsiveContainer height={500} width=\"100%\">\r\n            <AreaChart data={data}>\r\n                <defs>\r\n                    <linearGradient id=\"colorStock\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"5%\" stopColor=\"#BA9781\" stopOpacity={0.8}/>\r\n                        <stop offset=\"95%\" stopColor=\"#BA9781\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <XAxis dataKey=\"name\" interval={1}/>\r\n                <YAxis type=\"number\" domain={['dataMin - 10', 'dataMax + 10']}/>\r\n                <Tooltip/>\r\n                <Area\r\n                    isAnimationActive={true}\r\n                    type=\"monotone\"\r\n                    dataKey=\"price\"\r\n                    stroke=\"#BA9781\"\r\n                    fillOpacity={1}\r\n                    fill=\"url(#colorStock)\"\r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n\r\nexport default StockGraph;","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nconst { Item } = Descriptions;\r\n\r\nconst stats = ['open', 'ask', 'bid', 'high', 'low', 'volume']\r\n\r\nfunction StockStats({stock}) {\r\n\r\n    return (\r\n        <Descriptions className=\"stockview-stats\" layout=\"vertical\" bordered>\r\n            {stats.map((stat, index) => (\r\n                <Item\r\n                    label={stat.charAt(0).toUpperCase() + stat.slice(1)}\r\n                    key={`desc-item-${index}`}\r\n                >\r\n                    {stock[stat] ? stock[stat]/100 : 'N/A'}\r\n                </Item>\r\n            ))}\r\n        </Descriptions>\r\n    );\r\n}\r\n\r\nexport default StockStats;","import React, {useContext, useState} from 'react';\r\nimport { Divider, Button, InputNumber } from 'antd';\r\nimport { CoreContext } from '../../../../store/providers/CoreProvider';\r\n\r\nfunction StockOrder({stock}) {\r\n    const { createOrder, user } = useContext(CoreContext);\r\n    const [shares, setShares] = useState(0);\r\n\r\n    const submitOrder = (action) => {\r\n        if(shares === 0) return;\r\n        \r\n        createOrder({\r\n            accountID: user.data.user.accounts[0].id,\r\n            stockID: stock.id,\r\n            action,\r\n            quantity: shares,         \r\n        })\r\n\r\n        setShares(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"stockview-order-form\">\r\n            <div className=\"stockorder-form-item\">\r\n                <p>Shares</p>\r\n                <InputNumber\r\n                    className=\"stockorder-input\"\r\n                    value={shares}                 \r\n                    onChange={(e) => setShares(e)}\r\n                    size=\"small\"\r\n                    min={0}\r\n                    max={99}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"stockorder-form-item\">\r\n                <p>Market Price</p>\r\n                <p>${stock.price/100}</p>\r\n            </div>\r\n\r\n            <Divider className=\"stockorder-divider\"/>\r\n\r\n            <div className=\"stockorder-form-item\">\r\n                <p>Estimated Total</p>\r\n                <p>${(shares * stock.price/100).toFixed(2)}</p>\r\n            </div>\r\n\r\n            <div className=\"stockorder-btn-group\">\r\n                <Button className=\"stockorder-btn\" type=\"primary\" onClick={() => submitOrder('buy')}>Confirm Buy</Button>\r\n                <Button className=\"stockorder-btn\" onClick={() => submitOrder('sell')}>Confirm Sell</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StockOrder;","import React, {useEffect, useState} from 'react';\r\nimport { Button } from 'antd';\r\n\r\nfunction StockNews({stock}) {\r\n    const [news, setNews] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let testNews = [\r\n            {\r\n                headline: `${stock.name} declares 4:1 stock split...`,\r\n                author: 'The Verge',\r\n                date: 'Oct 1'\r\n            },\r\n            {\r\n                headline: `${stock.name} slumps at keynote event...`,\r\n                author: 'Wall Street Journal',\r\n                date: 'Oct 3'\r\n            },\r\n            {\r\n                headline: `Big investor sells ${stock.name} shares...`,\r\n                author: 'The Verge',\r\n                date: 'Oct 3'\r\n            },\r\n            {\r\n                headline: `${stock.name} announces new CEO amid...`,\r\n                author: 'New York Times',\r\n                date: 'Oct 4'\r\n            },\r\n            {\r\n                headline: `${stock.name} underfire for insider trading...`,\r\n                author: 'The Verge',\r\n                date: 'Oct 5'\r\n            },\r\n            {\r\n                headline: `${stock.name} bounces back from slump...`,\r\n                author: 'The Verge',\r\n                date: 'Oct 5'\r\n            },\r\n            {\r\n                headline: `${stock.name} announces new device...`,\r\n                author: 'The Verge',\r\n                date: 'Oct 7'\r\n            },\r\n        ]\r\n\r\n        setNews(testNews);\r\n    }, [stock])\r\n\r\n    return (\r\n        <div className=\"stockview-news\">\r\n            {news.reverse().map((news, index) => (\r\n                <div className=\"news-card\" key={`stockview-${index}`}>\r\n                    <p>{news.headline}</p>\r\n\r\n                    <div className=\"news-meta\">\r\n                        <p>{news.author}</p>\r\n                        <p>{news.date}</p>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n\r\n            <Button style={{width: '100%'}}>View More</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StockNews;","import React, { useContext } from 'react';\r\nimport { CoreContext } from '../../../../store/providers/CoreProvider';\r\nimport { Row, Col, Card, Skeleton } from 'antd'\r\n\r\nimport StockHeader from './StockHeader';\r\nimport StockGraph from './StockGraph';\r\nimport StockStats from './StockStats';\r\nimport StockOrder from './StockOrder';\r\nimport StockNews from './StockNews';\r\n\r\nfunction StockView() {\r\n    const {stockRef, stocks} = useContext(CoreContext)\r\n\r\n    const renderView = () => {\r\n        if(stocks.data) {\r\n            let data = stocks.data.stocks\r\n            \r\n            return (\r\n                <Row gutter={16}>\r\n                    <Col xs={24} lg={18}>                   \r\n                        <Card className=\"stockview-card\">\r\n                            <StockHeader stock={data[stockRef]}/>\r\n                            <StockGraph stock={data[stockRef]}/>\r\n                        </Card>\r\n                        \r\n                        <StockStats stock={data[stockRef]}/>\r\n                    </Col>\r\n\r\n                    <Col xs={24} lg={6}>\r\n                        <Card className=\"stockview-card\" title=\"Order\">\r\n                            <StockOrder stock={data[stockRef]}/>\r\n                        </Card>\r\n\r\n                        <Card className=\"stockview-card\" title=\"News\">\r\n                            <StockNews stock={data[stockRef]}/>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Skeleton loading={stocks.loading} active>\r\n            {renderView()}\r\n        </Skeleton>\r\n    );\r\n}\r\n\r\nexport default StockView;","import React, { useState } from 'react';\r\nimport { Timeline } from 'antd'\r\n\r\nfunction OrderHistory() {\r\n    const [orders] = useState([\r\n        {\r\n            action: 'deposit',\r\n            description: 'Deposited $2500.00'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 4 shares of TSLA @ $410.31 each'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 3 shares of AAPL @ $119.41 each'\r\n        },\r\n        {\r\n            action: 'withdraw',\r\n            description: 'Withdrew $2000.00'\r\n        },        \r\n        {\r\n            action: 'sell',\r\n            description: 'Sold 2 shares of GOOGL @ $1190.41 each'\r\n        },\r\n        {\r\n            action: 'deposit',\r\n            description: 'Deposited $2500.00'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 4 shares of TSLA @ $410.31 each'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 3 shares of AAPL @ $119.41 each'\r\n        },\r\n        {\r\n            action: 'withdraw',\r\n            description: 'Withdrew $2000.00'\r\n        },        \r\n        {\r\n            action: 'sell',\r\n            description: 'Sold 2 shares of GOOGL @ $1190.41 each'\r\n        },\r\n        {\r\n            action: 'deposit',\r\n            description: 'Deposited $2500.00'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 4 shares of TSLA @ $410.31 each'\r\n        },\r\n        {\r\n            action: 'buy',\r\n            description: 'Bought 3 shares of AAPL @ $119.41 each'\r\n        },\r\n    ])\r\n\r\n    const renderOrder = (order, index) => {\r\n        const colors = {withdraw: 'gray', deposit: '#40A9FF', buy: 'green', sell: 'red'}\r\n\r\n        return (\r\n            <Timeline.Item color={colors[order.action]} id={index}>\r\n                {order.description}\r\n            </Timeline.Item>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Timeline>\r\n            {orders.map((order, index) => renderOrder(order, index))}\r\n        </Timeline>\r\n    );\r\n}\r\n\r\nexport default OrderHistory;","import React, { useContext, useRef, useState } from 'react';\r\nimport { Row, Col, Form, Select, Radio, InputNumber, DatePicker, Divider, Button } from 'antd'\r\nimport { CoreContext } from '../../../../store/providers/CoreProvider';\r\n\r\nconst { Option } = Select\r\n\r\nfunction OrderForm() {\r\n    const {stocks, user, createOrder} = useContext(CoreContext);\r\n    const formRef = useRef();\r\n\r\n    const [quantity, setQuantity] = useState(null)\r\n    const [price, setPrice] = useState(null)\r\n    const [editPrice, setEditPrice] = useState(false)\r\n    \r\n    const onFinish = () => {\r\n        const formData = formRef.current.getFieldsValue()\r\n\r\n        let order = {\r\n            accountID: user.data.user.accounts[0].id,\r\n            stockID: stocks.data.stocks[formData.symbol].id,\r\n            action: formData.action || 'buy',\r\n            quantity,\r\n        }\r\n\r\n        if(formData.priceType === 'limit') order.price = price * 100\r\n        if(formData.goodTill) order.expiry = formData.goodTill.format()\r\n\r\n        createOrder(order)\r\n\r\n        formRef.current.resetFields()\r\n        setPrice(null)\r\n        setQuantity(null)\r\n        setEditPrice(false)\r\n    }\r\n\r\n    const updatePrice = (e) => {\r\n        const formData = formRef.current.getFieldsValue()\r\n\r\n        if((!formData.priceType || formData.priceType === 'market')) {\r\n            setEditPrice(false)\r\n\r\n            const stock = stocks.data.stocks[formData.symbol]\r\n            if(!stock) return\r\n\r\n            const newPrice = stock.price/100\r\n            formRef.current.setFieldsValue({\r\n                price: newPrice\r\n            })\r\n\r\n            setPrice(newPrice)            \r\n        } else if(formData.priceType === 'limit') {\r\n            setEditPrice(true)\r\n        }\r\n    }\r\n\r\n    const estimateTotal = () => {\r\n        if(!price || !quantity) return \"0.00\"\r\n        return (price * quantity).toFixed(2)\r\n    }\r\n    \r\n    const renderSelect = () => {\r\n        if(stocks.data) {\r\n            return(\r\n                <Select\r\n                    id=\"symbol\"\r\n                    showSearch\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => option['children'].toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    onChange={updatePrice}\r\n                >\r\n                    {stocks.data.stocks.map((stock, index) => (\r\n                        <Option key={`symbol-option-${index}`} id={index} value={index}>\r\n                            {stock.ticker}\r\n                        </Option>\r\n                    ))}\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form layout='vertical' onFinish={onFinish} ref={formRef}>\r\n            <Row gutter={16}>\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                        label=\"Symbol\"\r\n                        name=\"symbol\"\r\n                        rules={[{ required: true, message: \"Please select a symbol.\" }]}\r\n                    >\r\n                        {renderSelect()}                   \r\n                    </Form.Item>                    \r\n                </Col>\r\n\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                        label=\"Price Type\"\r\n                        name=\"priceType\"\r\n                        rules={[{ required: true, message: \"Please select a price type.\" }]}\r\n                    >\r\n                        <Select id=\"priceType\" onChange={updatePrice}>\r\n                            <Option value=\"market\">Market</Option>\r\n                            <Option value=\"limit\">Limit</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                        label=\"Price\"\r\n                        name=\"price\"\r\n                        rules={[{ required: true, message: \"Please select a price.\" }]}\r\n                    >\r\n                        <InputNumber\r\n                            id=\"price\"\r\n                            min={0}\r\n                            className=\"order-action-group\"\r\n                            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                            onChange={setPrice}\r\n                            disabled={!editPrice}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n                <Col span={16}>\r\n                    <Form.Item\r\n                        label=\"Action\"\r\n                        name=\"action\"\r\n                    >\r\n                        <Radio.Group id=\"action\" defaultValue=\"buy\" className=\"order-action-group\">\r\n                            <Radio.Button className=\"order-action-btn\" value=\"buy\">Buy</Radio.Button>\r\n                            <Radio.Button className=\"order-action-btn\" value=\"sell\">Sell</Radio.Button>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                        label=\"Quantity\"\r\n                        name=\"quantity\"\r\n                        rules={[{ required: true }]}\r\n                    >\r\n                        <InputNumber\r\n                            id=\"quantity\"\r\n                            min={0}\r\n                            className=\"order-action-group\"\r\n                            onChange={setQuantity}                           \r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Form.Item\r\n                label=\"Good 'til\"\r\n                name=\"goodTill\"\r\n            >\r\n                <DatePicker id='goodTill' className=\"order-action-group\"/>\r\n            </Form.Item>\r\n\r\n            <Divider className=\"stockorder-divider\"/>\r\n\r\n            <div className=\"stockorder-form-item\">\r\n                <p>Estimated Total</p>\r\n                <p>${estimateTotal()}</p>\r\n            </div>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">Confirm Order</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default OrderForm;","import React, { useContext, useRef } from 'react';\r\nimport { Row, Col, Form, Radio, InputNumber, Button } from 'antd'\r\nimport { CoreContext } from '../../../../store/providers/CoreProvider';\r\n\r\nfunction OrderFunds() {\r\n    const {changeBalance} = useContext(CoreContext);\r\n    const formRef = useRef();\r\n\r\n    const onFinish = (values) => {\r\n        const mult = (!values.action || values.action === 'deposit') ? 1 : -1    \r\n        changeBalance((mult * values.amount * 100).toFixed(0))\r\n        formRef.current.resetFields()\r\n    }\r\n    \r\n    return (\r\n        <Form layout='vertical' onFinish={onFinish} ref={formRef}>\r\n            <Row gutter={16}>\r\n                <Col span={16}>\r\n                    <Form.Item\r\n                        label=\"Action\"\r\n                        name=\"action\"\r\n                    >\r\n                        <Radio.Group id=\"action\" defaultValue=\"deposit\" className=\"order-action-group\">\r\n                            <Radio.Button className=\"order-action-btn\" value=\"deposit\">Deposit</Radio.Button>\r\n                            <Radio.Button className=\"order-action-btn\" value=\"withdraw\">Withdraw</Radio.Button>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                        label=\"Amount\"\r\n                        name=\"amount\"\r\n                    >\r\n                        <InputNumber\r\n                            id=\"amount\"\r\n                            className=\"order-action-group\"\r\n                            min={0}\r\n                            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">Confirm Transaction</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default OrderFunds;","import React from 'react';\r\nimport { Row, Col, Card } from 'antd'\r\nimport OrderHistory from './OrderHistory';\r\nimport OrderForm from './OrderForm';\r\nimport OrderFunds from './OrderFunds';\r\n\r\n\r\nfunction OrderView() {\r\n    return (\r\n        <div>\r\n            <Row gutter={16}>\r\n                <Col xs={24} lg={18}>                   \r\n                    <Card className=\"stockview-card\" title=\"Order\">\r\n                        <OrderForm/>\r\n                    </Card>\r\n                    \r\n                    <Card className=\"stockview-card\" title=\"Manage Funds\">\r\n                        <OrderFunds/>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col xs={24} lg={6}>\r\n                    <Card className=\"stockview-card\" title=\"History\">\r\n                        <OrderHistory/>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderView;","import React from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\nimport StockView from '../components/homelayout/views/stockview/StockView'\r\nimport OrderView from '../components/homelayout/views/orderview/OrderView'\r\n\r\nconst ViewRouter = (props) => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={StockView}/>\r\n        <Route exact path=\"/home\" component={StockView}/>\r\n        <Route path=\"/home/stock\" component={StockView}/>\r\n        <Route path=\"/home/order\" component={OrderView}/>\r\n    </Switch>\r\n)\r\n\r\nexport default ViewRouter","import React, { useContext, useEffect } from 'react';\r\nimport { Layout } from 'antd'\r\n\r\nimport Sidebar from './sidebar/Sidebar';\r\nimport Stockbar from './stockbar/Stockbar';\r\nimport ViewRouter from '../../routers/ViewRouter'\r\n\r\nimport { AuthContext } from '../../store/providers/AuthProvider';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nfunction HomeLayout() {\r\n    const { token, local_auth } = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n        local_auth()\r\n    }, [])\r\n\r\n    const renderLayout = () => (\r\n        <Layout className=\"home-layout\">\r\n            <Sidebar/>\r\n            <Stockbar/>\r\n\r\n            <Layout className=\"view-layout\">\r\n                <ViewRouter/>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {token ? renderLayout() : <Redirect to=\"/auth\"/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeLayout;","import React, {useState, useContext, useRef } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport {Form, Input, Checkbox, Button, notification} from 'antd'\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { AuthContext } from '../../store/providers/AuthProvider';\r\n\r\n\r\nfunction AuthForm({ formType }) {\r\n    const { login, signup, token } = useContext(AuthContext);\r\n    const formRef = useRef();\r\n\r\n    const onFinish = async () => {\r\n        const formData = formRef.current.getFieldsValue()\r\n\r\n        let result = await {'login': login, 'signup': signup}[formType](formData)\r\n\r\n        if(result) {\r\n            notification['error']({\r\n                message: 'Authentication Error',\r\n                description: result\r\n            })\r\n        }\r\n    }\r\n\r\n    const renderLogin = () => (\r\n        <Form onFinish={onFinish} ref={formRef}>\r\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please input email.'}]}>\r\n                <Input id='email' prefix={<UserOutlined/>} placeholder=\"Email\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please input password.'}]}>\r\n                <Input id='password' prefix={<LockOutlined/>} placeholder=\"Password\" type=\"password\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Form.Item style={{float: 'left'}} noStyle>\r\n                    <Checkbox id='remember'>Remember me</Checkbox>\r\n                </Form.Item>\r\n\r\n                <a href=\"/\" style={{float: 'right'}}>Forgot Password?</a>\r\n            </Form.Item>\r\n\r\n            <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"register-button\"\r\n            >\r\n                Log In\r\n            </Button>\r\n        </Form>\r\n    )\r\n\r\n    const renderSignup = () => (\r\n        <Form onFinish={onFinish} ref={formRef}>\r\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please input email.'}]}>\r\n                <Input id='email' prefix={<UserOutlined/>} placeholder=\"Email\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please input password.'}]}>\r\n                <Input id='password' prefix={<LockOutlined/>} placeholder=\"Password\" type=\"password\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"confirm_password\" rules={[{ required: true, message: 'Please confirm password.'}]}>\r\n                <Input id='confirm_password' prefix={<LockOutlined/>} placeholder=\"Confirm Password\" type=\"password\"/>\r\n            </Form.Item>\r\n\r\n            <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"register-button\"\r\n            >\r\n                Sign Up\r\n            </Button>\r\n        </Form>\r\n    )\r\n\r\n    if(token != \"\") {\r\n        return <Redirect to='/home'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(formType === 'login') ? renderLogin() : renderSignup()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthForm","import React from 'react'\r\nimport {Row, Col, Tabs} from 'antd'\r\nimport AuthForm from './AuthForm'\r\n// import RegisterForm from './RegisterForm'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nfunction RegisterLayout() {\r\n    return (\r\n        <div>\r\n            <div className=\"register-bg\"/>\r\n            <Row\r\n                className=\"register-page\"\r\n                align=\"middle\"\r\n                justify=\"center\"\r\n            >\r\n                <Col md={12} xs={24}>\r\n                    <div className=\"register-card\">\r\n                        <div style={{width: '100%'}}>\r\n                            <h1 className=\"register-title\">fleamarket 52</h1>\r\n\r\n                            <Tabs>\r\n                                <TabPane tab=\"Login\" key=\"login\">\r\n                                    <AuthForm formType=\"login\"/>\r\n                                </TabPane>\r\n                                <TabPane tab=\"Signup\" key=\"signup\">\r\n                                    <AuthForm formType=\"signup\"/>\r\n                                </TabPane>\r\n                            </Tabs>\r\n\r\n                            <p className=\"register-footer\">\r\n                                Developed by Shrish Mohapatra for COMP 2406\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col md={12} xs={0}/>\r\n                \r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterLayout","import React from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\nimport HomeLayout from '../components/homelayout/HomeLayout'\r\nimport AuthLayout from '../components/authlayout/AuthLayout'\r\n\r\nconst AppRouter = (props) => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={HomeLayout}/>\r\n        <Route exact path=\"/auth\" component={AuthLayout}/>\r\n        <Route path=\"/home\" component={HomeLayout}/>\r\n    </Switch>\r\n)\r\n\r\nexport default AppRouter","import React from 'react';\r\n\r\nimport AppRouter from '../../routers/AppRouter';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nimport { CoreProvider } from './CoreProvider';\r\nimport { AuthProvider } from './AuthProvider';\r\n\r\nimport { ApolloProvider, ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: 'http://localhost:8000/api/graph',\r\n  });\r\n  \r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem('token')\r\n\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            token: token || \"\",\r\n        }\r\n    }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nfunction Provider() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <AuthProvider>\r\n                <CoreProvider>\r\n                    <BrowserRouter>\r\n                        <AppRouter/>\r\n                    </BrowserRouter>\r\n                </CoreProvider>\r\n            </AuthProvider>\r\n        </ApolloProvider>\r\n    );\r\n}\r\n\r\nexport default Provider;","import React from 'react';\nimport Provider from './store/providers/Provider';\n\nimport 'antd/dist/antd.less';\nimport './App.less';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}